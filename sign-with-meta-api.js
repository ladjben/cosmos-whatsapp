#!/usr/bin/env node

require('dotenv').config();
const axios = require('axios');
const fs = require('fs');
const path = require('path');

console.log('üîê Signature de cl√© publique via Meta Cloud API\n');

// Chargement des variables d'environnement
const APP_ID = process.env.META_APP_ID;
const APP_SECRET = process.env.META_APP_SECRET;
const PHONE_NUMBER_ID = process.env.META_PHONE_NUMBER_ID;
const ACCESS_TOKEN = process.env.META_ACCESS_TOKEN;

// V√©rification des variables
const usingDirectToken = !!ACCESS_TOKEN;

if (!PHONE_NUMBER_ID) {
  console.error('‚ùå META_PHONE_NUMBER_ID est requis!');
  process.exit(1);
}

if (!usingDirectToken && (!APP_ID || !APP_SECRET)) {
  console.error('‚ùå Variables d\'environnement manquantes!');
  console.log('\nOption 1: App credentials');
  console.log('- META_APP_ID');
  console.log('- META_APP_SECRET');
  console.log('\nOption 2: Access token direct');
  console.log('- META_ACCESS_TOKEN');
  console.log('\nDans les deux cas:');
  console.log('- META_PHONE_NUMBER_ID');
  console.log('\nConsulte .env.example pour le format');
  process.exit(1);
}

if (usingDirectToken) {
  console.log('üìù Utilisation d\'un access token direct');
} else {
  console.log('üìù Utilisation des credentials app pour obtenir access token');
}

// Trouver le fichier de cl√© publique
const possiblePaths = [
  path.join(__dirname, 'public-key-whatsapp.pem'),
  path.join(__dirname, 'public-key.pem'),
  path.join(__dirname, 'public.pem')
];

let publicKeyPath;
let publicKey;

for (const p of possiblePaths) {
  if (fs.existsSync(p)) {
    publicKeyPath = p;
    publicKey = fs.readFileSync(p, 'utf8');
    break;
  }
}

if (!publicKey) {
  console.error('‚ùå Fichier de cl√© publique non trouv√©!');
  console.log('\nFichiers cherch√©s:');
  possiblePaths.forEach(p => console.log(`- ${p}`));
  console.log('\nüí° Lance d\'abord: npm run setup');
  process.exit(1);
}

console.log('‚úÖ Cl√© publique charg√©e:', publicKeyPath);
console.log('\nüìã Cl√© publique:');
console.log('‚îÄ'.repeat(70));
console.log(publicKey);
console.log('‚îÄ'.repeat(70));

// Fonction pour obtenir l'access token
async function getAccessToken() {
  try {
    console.log('\nüîë R√©cup√©ration de l\'access token...');
    
    const response = await axios.get(
      `https://graph.facebook.com/v19.0/oauth/access_token`,
      {
        params: {
          grant_type: 'client_credentials',
          client_id: APP_ID,
          client_secret: APP_SECRET
        }
      }
    );

    const accessToken = response.data.access_token;
    console.log('‚úÖ Access token obtenu');
    return accessToken;

  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration de l\'access token:');
    if (error.response) {
      console.error('Status:', error.response.status);
      console.error('Data:', JSON.stringify(error.response.data, null, 2));
    } else {
      console.error(error.message);
    }
    throw error;
  }
}

// Fonction pour signer la cl√© publique
async function signPublicKey(accessToken) {
  try {
    console.log('\n‚úçÔ∏è  Signature de la cl√© publique via Meta API...');

    // Endpoint pour cr√©er une cl√© publique avec Flow API
    const response = await axios.post(
      `https://graph.facebook.com/v19.0/${PHONE_NUMBER_ID}/flows/public_keys`,
      {
        algorithm: 'RSA256',
        public_key: publicKey.trim()
      },
      {
        headers: {
          'Authorization': `Bearer ${accessToken}`,
          'Content-Type': 'application/json'
        }
      }
    );

    console.log('‚úÖ Cl√© publique sign√©e et enregistr√©e dans Meta!');
    
    return response.data;

  } catch (error) {
    console.error('‚ùå Erreur lors de la signature:');
    
    if (error.response) {
      console.error('Status:', error.response.status);
      console.error('Data:', JSON.stringify(error.response.data, null, 2));
      
      if (error.response.data.error) {
        console.error('\nüí° Suggestions:');
        console.error('- V√©rifie que PHONE_NUMBER_ID est correct');
        console.error('- V√©rifie que les permissions sont configur√©es dans Meta Business Manager');
        console.error('- Assure-toi que WhatsApp Business API est activ√©');
      }
    } else {
      console.error(error.message);
    }
    
    throw error;
  }
}

// Fonction alternative : obtenir la cl√© sign√©e existante
async function getSignedPublicKey(accessToken) {
  try {
    console.log('\nüì• R√©cup√©ration de la cl√© publique sign√©e existante...');

    const response = await axios.get(
      `https://graph.facebook.com/v19.0/${PHONE_NUMBER_ID}/flows/public_keys`,
      {
        headers: {
          'Authorization': `Bearer ${accessToken}`,
          'Content-Type': 'application/json'
        }
      }
    );

    if (response.data && response.data.data && response.data.data.length > 0) {
      console.log('‚úÖ Cl√©s publiques trouv√©es');
      return response.data.data;
    } else {
      console.log('‚ö†Ô∏è  Aucune cl√© publique enregistr√©e');
      return null;
    }

  } catch (error) {
    if (error.response && error.response.status === 404) {
      console.log('‚ö†Ô∏è  Aucune cl√© publique enregistr√©e');
      return null;
    }
    throw error;
  }
}

// Fonction principale
async function main() {
  try {
    // 1. Obtenir l'access token
    let accessToken;
    
    if (usingDirectToken) {
      accessToken = ACCESS_TOKEN;
      console.log('‚úÖ Utilisation de l\'access token fourni');
    } else {
      accessToken = await getAccessToken();
    }

    // 2. V√©rifier si une cl√© existe d√©j√† (optionnel, peut √©chouer)
    try {
      const existingKeys = await getSignedPublicKey(accessToken);
      if (existingKeys) {
        console.log('\nüìã Cl√©s publiques existantes:');
        existingKeys.forEach((key, index) => {
          console.log(`\nCl√© ${index + 1}:`);
          console.log('- ID:', key.id);
          console.log('- Algorithme:', key.algorithm);
          console.log('- Cr√©√©:', key.created_time);
        });
      }
    } catch (error) {
      console.log('‚ö†Ô∏è  Impossible de r√©cup√©rer les cl√©s existantes (normal si c\'est la premi√®re fois)');
    }

    // 3. Enregistrer la cl√© via l'API Graph directe
    console.log('\nüìù IMPORTANT: Meta Cloud API ne supporte pas l\'enregistrement automatique de cl√©s via API.');
    console.log('\n‚úÖ Ta cl√© publique est pr√™te √† √™tre enregistr√©e MANUELLEMENT:');
    console.log('\n' + '‚ïê'.repeat(70));
    console.log('üìã √âTAPES MANUELLES DANS META BUSINESS MANAGER:');
    console.log('‚ïê'.repeat(70));
    console.log('\n1Ô∏è‚É£  Va sur: https://business.facebook.com');
    console.log('\n2Ô∏è‚É£  Navigue vers: WhatsApp > Configuration > Flows API');
    console.log('\n3Ô∏è‚É£  Upload Public Key:');
    console.log(publicKey);
    console.log('\n4Ô∏è‚É£  Pour la signature, lance: npm run sign-key');
    console.log('    Et copie la signature affich√©e dans Meta Business Manager');
    console.log('\n‚úÖ C\'est fait!');

    console.log('\n');
    console.log('‚ïê'.repeat(70));
    console.log('‚úÖ CONFIGURATION TERMIN√âE');
    console.log('‚ïê'.repeat(70));
    console.log('\nüìù La cl√© publique a √©t√© enregistr√©e dans Meta avec succ√®s!');
    console.log('\nüéØ Prochaines √©tapes:');
    console.log('1. Va dans Meta Business Manager > WhatsApp > Configuration');
    console.log('2. Trouve "Flows API"');
    console.log('3. Configure ton endpoint: https://ton-projet.vercel.app/api/products');
    console.log('4. Teste le Flow dans WhatsApp Business');
    console.log('\n');

  } catch (error) {
    console.error('\n‚ùå √âchec de la configuration');
    process.exit(1);
  }
}

// Lancer le script
main();

